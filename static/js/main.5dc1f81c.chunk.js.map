{"version":3,"sources":["new-question/components/Collection.js","new-question/NewQuestion.js","view-questions/ViewQuestions.js","App.js","serviceWorker.js","index.js"],"names":["Collection","collection","item","setItem","setCollection","placeholder","Fragment","InputGroup","style","marginBottom","Form","Control","value","onChange","target","Append","Button","variant","disabled","length","onClick","map","option","i","key","index","filter","o","NewQuestion","onCreate","React","useState","season","setSeason","episode","setEpisode","text","setText","answer","setAnswer","setOption","options","setOptions","tag","setTag","tags","setTags","reset","Container","Row","Col","xs","Group","controlId","as","Array","from","_","v","EPS_IN_SEASON","Label","rows","float","marginTop","marginRight","columns","Header","accessor","width","ViewQuestions","questions","setQuestions","useEffect","window","indexedDB","open","onsuccess","event","result","transaction","objectStore","getAll","data","useMemo","useTable","getTableProps","getTableBodyProps","headerGroups","prepareRow","Table","striped","bordered","hover","size","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","getRowProps","cells","cell","getCellProps","App","Tabs","defaultActiveKey","id","unmountOnExit","Tab","eventKey","title","question","add","Boolean","location","hostname","match","onupgradeneeded","db","objectStoreNames","contains","createObjectStore","autoIncrement","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5dc1f81c.chunk.js","sourcesContent":["import React from 'react';\nimport { InputGroup, Form, Button } from 'react-bootstrap';\n\nexport function Collection({ collection, item, setItem, setCollection, placeholder }) {\n  const removeItem = index => {\n    setCollection(collection.filter((o, i) => i !== index));\n  };\n\n  const addItem = () => {\n    setCollection([...collection, item]);\n    setItem('');\n  };\n\n  return (\n    <React.Fragment>\n      <InputGroup style={{ marginBottom: '10px' }}>\n        <Form.Control\n          placeholder={placeholder}\n          value={item}\n          onChange={({ target: { value } }) => setItem(value)}\n        />\n        <InputGroup.Append>\n          <Button variant=\"outline-secondary\" disabled={item.length === 0} onClick={addItem}>\n            Add\n          </Button>\n        </InputGroup.Append>\n      </InputGroup>\n      {collection.map((option, i) => (\n        <li key={option} onClick={() => removeItem(i)}>\n          {option}\n        </li>\n      ))}\n    </React.Fragment>\n  );\n}\n","import React from 'react';\nimport { Container, Form, Button, Col, Row } from 'react-bootstrap';\nimport { Collection } from './components/Collection';\n\nexport function NewQuestion({ onCreate }) {\n  const [season, setSeason] = React.useState('');\n  const [episode, setEpisode] = React.useState('');\n  const [text, setText] = React.useState('');\n  const [answer, setAnswer] = React.useState('');\n  const [option, setOption] = React.useState('');\n  const [options, setOptions] = React.useState([]);\n  const [tag, setTag] = React.useState('');\n  const [tags, setTags] = React.useState([]);\n\n  const reset = () => {\n    setSeason('');\n    setEpisode('');\n    setText('');\n    setAnswer('');\n    setOption('');\n    setOptions([]);\n    setTag('');\n    setTags([]);\n  };\n\n  const isValid = () => {\n    return text.length > 0 && answer.length > 0 && options.length > 0 && tags.length > 0;\n  };\n\n  const createQuestion = () => {\n    const question = {\n      season,\n      episode,\n      text,\n      answer,\n      options,\n      tags\n    };\n\n    onCreate(question);\n    reset();\n  };\n\n  return (\n    <Container>\n      <Row>\n        <Col xs={7}>\n          <Form>\n            <Form.Row>\n              <Col>\n                <Form.Group controlId=\"season\">\n                  <Form.Control\n                    as=\"select\"\n                    placeholder={'Season'}\n                    value={season}\n                    onChange={({ target: { value } }) => setSeason(value)}\n                  >\n                    <option value=\"\">Select Season</option>\n                    {Array.from({ length: 9 }).map((_, i) => {\n                      const v = `Season ${i + 1}`;\n                      return <option key={v}>{v}</option>;\n                    })}\n                  </Form.Control>\n                </Form.Group>\n              </Col>\n              <Col>\n                <Form.Group controlId=\"episode\">\n                  <Form.Control\n                    as=\"select\"\n                    disabled={season.length === 0}\n                    value={episode}\n                    onChange={({ target: { value } }) => setEpisode(value)}\n                  >\n                    <option value=\"\">Select Episode</option>\n                    {Array.from({ length: EPS_IN_SEASON[season] }).map((_, i) => (\n                      <option key={i}>Episode {i + 1}</option>\n                    ))}\n                  </Form.Control>\n                </Form.Group>\n              </Col>\n            </Form.Row>\n            <Form.Group controlId=\"question\">\n              <Form.Label>Question</Form.Label>\n              <Form.Control\n                as=\"textarea\"\n                rows=\"3\"\n                value={text}\n                onChange={({ target: { value } }) => setText(value)}\n              />\n            </Form.Group>\n            <Form.Group controlId=\"answer\">\n              <Form.Label>Answer</Form.Label>\n              <Form.Control\n                as=\"textarea\"\n                rows=\"2\"\n                value={answer}\n                onChange={({ target: { value } }) => setAnswer(value)}\n              />\n            </Form.Group>\n            <Collection\n              placeholder=\"Option\"\n              item={option}\n              setItem={setOption}\n              collection={options}\n              setCollection={setOptions}\n            />\n            <Collection\n              placeholder=\"Tag\"\n              item={tag}\n              setItem={setTag}\n              collection={tags}\n              setCollection={setTags}\n            />\n          </Form>\n          <div style={{ float: 'right', marginTop: '10px' }}>\n            <Button variant=\"secondary\" style={{ marginRight: '5px' }} onClick={reset}>\n              Reset\n            </Button>\n            <Button onClick={createQuestion} disabled={!isValid()}>\n              Create\n            </Button>\n          </div>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nconst EPS_IN_SEASON = {\n  'Season 1': 6,\n  'Season 2': 22,\n  'Season 3': 25,\n  'Season 4': 19,\n  'Season 5': 28,\n  'Season 6': 26,\n  'Season 7': 26,\n  'Season 8': 24,\n  'Season 9': 25\n};\n","import React from 'react';\nimport { useTable } from 'react-table';\nimport { Table } from 'react-bootstrap';\n\nconst columns = [\n  { Header: 'Season', accessor: 'season', width: 10 },\n  { Header: 'Episode', accessor: 'episode', width: 10 },\n  { Header: 'Question', accessor: 'text', width: 40 },\n  { Header: 'Answer', accessor: 'answer', width: 40 },\n];\n\nexport function ViewQuestions() {\n  const [questions, setQuestions] = React.useState([]);\n\n  React.useEffect(() => {\n    const req = window.indexedDB.open('office-trivia', 1);\n\n    req.onsuccess = function (event) {\n      let db = event.target.result;\n\n      const tx = db.transaction('questions', 'readonly');\n      const store = tx.objectStore('questions');\n      const getReq = store.getAll();\n\n      getReq.onsuccess = function (event) {\n        setQuestions(event.target.result);\n      };\n    };\n  }, []);\n\n  const data = React.useMemo(() => [...questions], [questions]);\n\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } = useTable({\n    columns,\n    data,\n  });\n\n  return (\n    <Table striped bordered hover size=\"sm\" {...getTableProps()}>\n      <thead>\n        {headerGroups.map((headerGroup) => (\n          <tr {...headerGroup.getHeaderGroupProps()}>\n            {headerGroup.headers.map((column, i) => (\n              <th {...column.getHeaderProps()} style={{ width: `${columns[i].width}%` }}>\n                {column.render('Header')}\n              </th>\n            ))}\n          </tr>\n        ))}\n      </thead>\n      <tbody {...getTableBodyProps()}>\n        {rows.map((row) => {\n          prepareRow(row);\n          return (\n            <tr {...row.getRowProps()}>\n              {row.cells.map((cell) => {\n                return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>;\n              })}\n            </tr>\n          );\n        })}\n      </tbody>\n    </Table>\n  );\n}\n","import React from 'react';\nimport { Container, Tabs, Tab } from 'react-bootstrap';\nimport { NewQuestion } from './new-question/NewQuestion';\nimport { ViewQuestions } from './view-questions/ViewQuestions';\n\nfunction App() {\n  const saveQuestion = (question) => {\n    const req = window.indexedDB.open('office-trivia', 1);\n\n    req.onsuccess = function (event) {\n      let db = event.target.result;\n\n      const tx = db.transaction('questions', 'readwrite');\n      const store = tx.objectStore('questions');\n      store.add(question);\n    };\n  };\n\n  return (\n    <Container>\n      <Tabs\n        style={{ marginTop: '20px' }}\n        defaultActiveKey=\"new-question\"\n        id=\"app-tabs\"\n        unmountOnExit\n      >\n        <Tab style={{ marginTop: '20px' }} eventKey=\"new-question\" title=\"New Question\">\n          <NewQuestion onCreate={saveQuestion} />\n        </Tab>\n        <Tab style={{ marginTop: '20px' }} eventKey=\"questions\" title=\"View Questions\">\n          <ViewQuestions />\n        </Tab>\n      </Tabs>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst req = window.indexedDB.open('office-trivia', 1);\n\nreq.onupgradeneeded = function(event) {\n  let db = event.target.result;\n\n  if (!db.objectStoreNames.contains('questions')) {\n    db.createObjectStore('questions', { autoIncrement: true });\n  }\n};\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}